<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Microsoft.Chung.Control</name>
    </assembly>
    <members>
        <member name="T:Microsoft.Research.CommunityTechnologies.ControlLib.ControlUtil">
             <summary>
            	Control utility methods.
             </summary>
            
            	<remarks>
            	This class contains utility methods for dealing with Control-derived
             objects.  All methods are static.
            	</remarks>
        </member>
        <member name="M:Microsoft.Research.CommunityTechnologies.ControlLib.ControlUtil.#ctor">
             <summary>
             Do not use this constructor.
             </summary>
            
             <remarks>
             Do not use this constructor.  All ControlUtil methods are static.
             </remarks>
        </member>
        <member name="M:Microsoft.Research.CommunityTechnologies.ControlLib.ControlUtil.GetClientMousePosition(System.Windows.Forms.Control)">
             <summary>
            	Gets the current mouse position in client coordinates.
             </summary>
            
            	<param name="oControl">
             Control to use for the client coordinates.
             </param>
            
             <returns>
             Mouse position in client coordinates.
             </returns>
            
             <remarks>
            	NOTE: The point returned by this method can be outside the control's
             client area.  This can happen if the user is moving the mouse quickly.
             The caller should check for this.
             </remarks>
        </member>
        <member name="T:Microsoft.Chung.Visualization.ChungControl">
             <summary>
             Chung graph-drawing control.
             </summary>
            
             <remarks>
             <see cref="T:Microsoft.Chung.Visualization.ChungControl"/> is one of several classes provided with the
             Chung system that draw a graph, which is a set of vertices connected by
             edges.
            
             <para>
             The following table summarizes the graph-drawing classes:
             </para>
            
             <list type="table">
            
             <listheader>
             <term>Class</term>
             <term>For Use In</term>
             <term>Features</term>
             <term>Required Chung Assemblies</term>
             </listheader>
            
             <item>
             <term><see cref="T:Microsoft.Chung.Visualization.GraphDrawer"/></term>
             <term>
             Any application that wants to draw a graph onto a <see cref="T:System.Drawing.Bitmap"/> or
             a <see cref="T:System.Drawing.Graphics"/> object in a synchronous manner.
             </term>
             <term>
             Can use custom layouts, vertex drawers, and edge drawers.
             </term>
             <term>
             Core.dll, Visualization.dll
             </term>
             </item>
            
             <item>
             <term><see cref="T:Microsoft.Chung.Visualization.AsyncGraphDrawer"/></term>
             <term>
             Any application that wants to draw a graph onto a <see cref="T:System.Drawing.Bitmap"/> or
             a <see cref="T:System.Drawing.Graphics"/> object in a synchronous or asynchronous manner.
             </term>
             <term>
             Can use custom layouts, vertex drawers, and edge drawers.
             </term>
             <term>
             Core.dll, Visualization.dll
             </term>
             </item>
            
             <item>
             <term><see cref="T:Microsoft.Chung.Visualization.MultiSelectionGraphDrawer"/></term>
             <term>
             Any application that wants to draw a graph onto a <see cref="T:System.Drawing.Bitmap"/> or
             a <see cref="T:System.Drawing.Graphics"/> object in a synchronous or asynchronous manner.
             </term>
             <term>
             Same as <see cref="T:Microsoft.Chung.Visualization.AsyncGraphDrawer"/>, plus vertices and edges can be
             drawn as selected.
             </term>
             <term>
             Core.dll, Visualization.dll
             </term>
             </item>
            
             <item>
             <term><see cref="T:Microsoft.Chung.Visualization.ChungControl"/></term>
             <term>
             Windows Forms applications
             </term>
             <term>
             Wraps a <see cref="T:Microsoft.Chung.Visualization.MultiSelectionGraphDrawer"/> in a Windows Forms
             control.
             </term>
             <term>
             Core.dll, Visualization.dll, Control.dll
             </term>
             </item>
            
             </list>
            
             <para>
             Using <see cref="T:Microsoft.Chung.Visualization.ChungControl"/> in an application involves two steps:
             <list type="bullet">
            
             <item>
             <description>
             Set properties that determine how the graph is drawn
             </description>
             </item>
            
             <item>
             <description>
             Populate the graph
             </description>
             </item>
            
             </list>
             </para>
            
             <para>
             To improve performance, call <see cref="M:Microsoft.Chung.Visualization.ChungControl.BeginUpdate"/> before populating
             the graph.  This prevents the graph from being immediately updated.  Call
             <see cref="M:Microsoft.Chung.Visualization.ChungControl.EndUpdate"/> when you are done.
             </para>
            
             <para>
             One or more vertices can be selected with the mouse.  If the control key is
             not pressed, clicking a vertex deselects any selected vertices and edges,
             then selects the clicked vertex and its incident edges.  If the control key
             is pressed, clicking a vertex toggles the selection state of the vertex and
             its incident edges without affecting the other vertices and edges.
             Clicking without the control key on an area not occupied by a vertex
             deselects all vertices and edges.
             </para>
            
             <para>
             To prevent vertex selection with the mouse, set the <see cref="P:Microsoft.Chung.Visualization.ChungControl.AllowSelectionWithMouse"/> property to false.
             </para>
            
             <para>
             To programatically select and deselect vertices, use the <see cref="M:Microsoft.Chung.Visualization.ChungControl.SetVertexSelected(Microsoft.Chung.Core.IVertex,System.Boolean,System.Boolean)"/>, <see cref="M:Microsoft.Chung.Visualization.ChungControl.SetEdgeSelected(Microsoft.Chung.Core.IEdge,System.Boolean,System.Boolean)"/>, <see cref="M:Microsoft.Chung.Visualization.ChungControl.SetSelected(Microsoft.Chung.Core.IVertex[],Microsoft.Chung.Core.IEdge[])"/>, and <see cref="M:Microsoft.Chung.Visualization.ChungControl.ClearSelection"/> methods.  To
             determine which vertices and edges are selected, use the <see cref="P:Microsoft.Chung.Visualization.ChungControl.SelectedVertices"/> and <see cref="P:Microsoft.Chung.Visualization.ChungControl.SelectedEdges"/> properties.
             </para>
            
             <para>
             Selected vertices and edges are drawn in colors different from unselected
             vertices and edges.  See the <see cref="M:Microsoft.Chung.Visualization.ChungControl.SetVertexSelected(Microsoft.Chung.Core.IVertex,System.Boolean,System.Boolean)"/> and <see cref="M:Microsoft.Chung.Visualization.ChungControl.SetEdgeSelected(Microsoft.Chung.Core.IEdge,System.Boolean,System.Boolean)"/> methods for details.
             </para>
            
             </remarks>
            
             <example>
             Here is sample C# code that populates a <see cref="T:Microsoft.Chung.Visualization.ChungControl"/> graph
             with several vertices and edges.  Note that <see cref="M:Microsoft.Chung.Visualization.ChungControl.BeginUpdate"/>
             should be called before populating the graph, and <see cref="M:Microsoft.Chung.Visualization.ChungControl.EndUpdate"/>
             should be called when you are done.
            
             <code>
             // Before populating the graph, call BeginUpdate().  When done, call
             // EndUpdate().
             
             oChungControl.BeginUpdate();
             
             // Get the graph's vertex collection.
             
             IVertexCollection oVertices = oChungControl.Graph.Vertices;
             
             // Add three vertices.
             
             IVertex oVertexA = oVertices.Add();
             IVertex oVertexB = oVertices.Add();
             IVertex oVertexC = oVertices.Add();
             
             // Get the graph's edge collection.
             
             IEdgeCollection oEdges = oChungControl.Graph.Edges;
             
             // Connect the vertices with edges.
             
             oEdges.Add(oVertexA, oVertexB);
             oEdges.Add(oVertexB, oVertexC);
             oEdges.Add(oVertexC, oVertexA);
             
             oChungControl.EndUpdate();
             </code>
            
             </example>
        </member>
        <member name="F:Microsoft.Chung.Visualization.ChungControl.DrawAsyncTimerIntervalMs">
            Interval used by m_oDrawAsyncTimer, in milliseconds.
        </member>
        <member name="F:Microsoft.Chung.Visualization.ChungControl.WaitMessage">
            Message drawn by DrawWaitMessage().
        </member>
        <member name="F:Microsoft.Chung.Visualization.ChungControl.WaitMessageFontSize">
            Font size used by DrawWaitMessage().
        </member>
        <member name="F:Microsoft.Chung.Visualization.ChungControl.WaitMessageX">
            Coordinates of the message drawn by DrawWaitMessage().
        </member>
        <member name="F:Microsoft.Chung.Visualization.ChungControl.WaitMessageY">
            
        </member>
        <member name="F:Microsoft.Chung.Visualization.ChungControl.MinimumVertexDragDelta">
            Minimum change in either vertex coordinate before a vertex drag begins.
        </member>
        <member name="F:Microsoft.Chung.Visualization.ChungControl.DraggedVertexRadius">
            Radius of a vertex as it is dragged with the mouse.
        </member>
        <member name="M:Microsoft.Chung.Visualization.ChungControl.#ctor">
            <summary>
            Initializes a new instance of the ChungControl class.
            </summary>
        </member>
        <member name="M:Microsoft.Chung.Visualization.ChungControl.BeginUpdate">
             <summary>
             Disables any redrawing of the graph.
             </summary>
            
             <remarks>
             To improve performance, call <see cref="M:Microsoft.Chung.Visualization.ChungControl.BeginUpdate"/> before adding
            	vertices and edges to the graph.  Call <see cref="M:Microsoft.Chung.Visualization.ChungControl.EndUpdate"/> when
            	you are done.
             </remarks>
            
            	<seealso cref="M:Microsoft.Chung.Visualization.ChungControl.EndUpdate"/>
        </member>
        <member name="M:Microsoft.Chung.Visualization.ChungControl.EndUpdate">
             <summary>
             Enables the redrawing of the graph.
             </summary>
            
             <remarks>
             To improve performance, call <see cref="M:Microsoft.Chung.Visualization.ChungControl.BeginUpdate"/> before adding
            	vertices and edges to the graph.  Call <see cref="M:Microsoft.Chung.Visualization.ChungControl.EndUpdate"/> when
            	you are done.
             </remarks>
            
            	<seealso cref="M:Microsoft.Chung.Visualization.ChungControl.BeginUpdate"/>
        </member>
        <member name="M:Microsoft.Chung.Visualization.ChungControl.SetVertexSelected(Microsoft.Chung.Core.IVertex,System.Boolean,System.Boolean)">
             <summary>
            	Selects or deselects a vertex.
             </summary>
            
             <param name="vertex">
             Vertex to select or deselect.  Can't be null.
             </param>
            
             <param name="selected">
             true to select <paramref name="vertex"/>, false to deselect it.
             </param>
            
             <param name="alsoIncidentEdges">
             true to also select or deselect the vertex's incident edges, false to
             leave the incident edges alone.
             </param>
            
             <remarks>
             Selecting or deselecting a vertex does not affect the selected state of
             the other vertices.
            
             <para>
             To select a set of vertices and edges, use the <see cref="M:Microsoft.Chung.Visualization.ChungControl.SetSelected(Microsoft.Chung.Core.IVertex[],Microsoft.Chung.Core.IEdge[])"/> method instead.
             </para>
            
             </remarks>
            
             <seealso cref="P:Microsoft.Chung.Visualization.ChungControl.AllowSelectionWithMouse"/>
             <seealso cref="M:Microsoft.Chung.Visualization.ChungControl.SetEdgeSelected(Microsoft.Chung.Core.IEdge,System.Boolean,System.Boolean)"/>
             <seealso cref="M:Microsoft.Chung.Visualization.ChungControl.SetSelected(Microsoft.Chung.Core.IVertex[],Microsoft.Chung.Core.IEdge[])"/>
             <seealso cref="M:Microsoft.Chung.Visualization.ChungControl.ClearSelection"/>
             <seealso cref="P:Microsoft.Chung.Visualization.ChungControl.SelectedVertices"/>
             <seealso cref="P:Microsoft.Chung.Visualization.ChungControl.SelectedEdges"/>
             <seealso cref="E:Microsoft.Chung.Visualization.ChungControl.SelectionChanged"/>
        </member>
        <member name="M:Microsoft.Chung.Visualization.ChungControl.SetEdgeSelected(Microsoft.Chung.Core.IEdge,System.Boolean,System.Boolean)">
             <summary>
            	Selects or deselects an edge.
             </summary>
            
             <param name="edge">
             Edge to select or deselect.  Can't be null.
             </param>
            
             <param name="selected">
             true to select <paramref name="edge"/>, false to deselect it.
             </param>
            
             <param name="alsoAdjacentVertices">
             true to also select or deselect the edge's adjacent vertices, false to
             leave the adjacent vertices alone.
             </param>
            
             <remarks>
             Selecting or deselecting an edge does not affect the selected state of
             the other edges.
            
             <para>
             To select a set of vertices and edges, use the <see cref="M:Microsoft.Chung.Visualization.ChungControl.SetSelected(Microsoft.Chung.Core.IVertex[],Microsoft.Chung.Core.IEdge[])"/> method instead.
             </para>
            
             </remarks>
            
             <seealso cref="P:Microsoft.Chung.Visualization.ChungControl.AllowSelectionWithMouse"/>
             <seealso cref="M:Microsoft.Chung.Visualization.ChungControl.SetVertexSelected(Microsoft.Chung.Core.IVertex,System.Boolean,System.Boolean)"/>
             <seealso cref="M:Microsoft.Chung.Visualization.ChungControl.SetSelected(Microsoft.Chung.Core.IVertex[],Microsoft.Chung.Core.IEdge[])"/>
             <seealso cref="M:Microsoft.Chung.Visualization.ChungControl.ClearSelection"/>
             <seealso cref="P:Microsoft.Chung.Visualization.ChungControl.SelectedVertices"/>
             <seealso cref="P:Microsoft.Chung.Visualization.ChungControl.SelectedEdges"/>
             <seealso cref="E:Microsoft.Chung.Visualization.ChungControl.SelectionChanged"/>
        </member>
        <member name="M:Microsoft.Chung.Visualization.ChungControl.SetSelected(Microsoft.Chung.Core.IVertex[],Microsoft.Chung.Core.IEdge[])">
             <summary>
            	Selects a set of vertices and edges.
             </summary>
            
             <param name="vertices">
             Array of zero or more vertices to select.
             </param>
            
             <param name="edges">
             Array of zero or more edges to select.
             </param>
            
             <remarks>
             This method deselects any selected vertices and edges, then selects the
             vertices and edges specified in <paramref name="vertices"/> and
             <paramref name="edges"/>.  It is more efficient than making multiple
             calls to <see cref="M:Microsoft.Chung.Visualization.ChungControl.SetVertexSelected(Microsoft.Chung.Core.IVertex,System.Boolean,System.Boolean)"/> and <see cref="M:Microsoft.Chung.Visualization.ChungControl.SetEdgeSelected(Microsoft.Chung.Core.IEdge,System.Boolean,System.Boolean)"/>.
             </remarks>
            
             <seealso cref="P:Microsoft.Chung.Visualization.ChungControl.AllowSelectionWithMouse"/>
             <seealso cref="M:Microsoft.Chung.Visualization.ChungControl.SetVertexSelected(Microsoft.Chung.Core.IVertex,System.Boolean,System.Boolean)"/>
             <seealso cref="M:Microsoft.Chung.Visualization.ChungControl.SetEdgeSelected(Microsoft.Chung.Core.IEdge,System.Boolean,System.Boolean)"/>
             <seealso cref="M:Microsoft.Chung.Visualization.ChungControl.SetSelected(Microsoft.Chung.Core.IVertex[],Microsoft.Chung.Core.IEdge[])"/>
             <seealso cref="M:Microsoft.Chung.Visualization.ChungControl.ClearSelection"/>
             <seealso cref="P:Microsoft.Chung.Visualization.ChungControl.SelectedVertices"/>
             <seealso cref="P:Microsoft.Chung.Visualization.ChungControl.SelectedEdges"/>
             <seealso cref="E:Microsoft.Chung.Visualization.ChungControl.SelectionChanged"/>
        </member>
        <member name="M:Microsoft.Chung.Visualization.ChungControl.ClearSelection">
             <summary>
            	Deselects all vertices and edges.
             </summary>
            
             <seealso cref="P:Microsoft.Chung.Visualization.ChungControl.AllowSelectionWithMouse"/>
             <seealso cref="M:Microsoft.Chung.Visualization.ChungControl.SetVertexSelected(Microsoft.Chung.Core.IVertex,System.Boolean,System.Boolean)"/>
             <seealso cref="M:Microsoft.Chung.Visualization.ChungControl.SetEdgeSelected(Microsoft.Chung.Core.IEdge,System.Boolean,System.Boolean)"/>
             <seealso cref="M:Microsoft.Chung.Visualization.ChungControl.SetSelected(Microsoft.Chung.Core.IVertex[],Microsoft.Chung.Core.IEdge[])"/>
             <seealso cref="P:Microsoft.Chung.Visualization.ChungControl.SelectedVertices"/>
             <seealso cref="P:Microsoft.Chung.Visualization.ChungControl.SelectedEdges"/>
             <seealso cref="E:Microsoft.Chung.Visualization.ChungControl.SelectionChanged"/>
        </member>
        <member name="M:Microsoft.Chung.Visualization.ChungControl.GetVertexFromPoint(System.Drawing.Point,Microsoft.Chung.Core.IVertex@)">
             <overloads>
             Gets the vertex containing a specified point.
             </overloads>
            
             <summary>
             Gets the vertex containing a specified <see cref="T:System.Drawing.Point"/>.
             </summary>
            
             <param name="point">
             Point to get a vertex for.
             </param>
            
             <param name="vertex">
             Where the <see cref="T:Microsoft.Chung.Core.IVertex"/> object gets stored.
             </param>
            
             <returns>
            	true if a vertex containing the point was found, false if not.
             </returns>
            
             <remarks>
             This method looks for a vertex that contains <paramref name="point"/>.
             If there is such a vertex, the vertex is stored at <paramref name="vertex"/> and true is returned.  Otherwise, <paramref name="vertex"/> is set to null and false is returned.
            
            	<para>
             If the graph hasn't been drawn yet, false is returned.
            	</para>
            
             <para>
            	The <see cref="M:Microsoft.Chung.Visualization.IVertexDrawer.VertexContainsPoint(Microsoft.Chung.Core.IVertex,System.Drawing.Point)"/> method on the <see cref="P:Microsoft.Chung.Visualization.ChungControl.VertexDrawer"/> object is used to determine which vertex, if
            	any, contains the point.
             </para>
            
             <para>
             An exception is thrown if an asynchronous drawing is in progress.
             Check <see cref="P:Microsoft.Chung.Visualization.ChungControl.IsDrawing"/> before calling this method.
             </para>
            
             </remarks>
        </member>
        <member name="M:Microsoft.Chung.Visualization.ChungControl.GetVertexFromPoint(System.Int32,System.Int32,Microsoft.Chung.Core.IVertex@)">
             <summary>
             Gets the vertex containing a specified coordinate pair.
             </summary>
            
             <param name="x">
             X-coordinate of the point to get a vertex for.
             </param>
            
             <param name="y">
             Y-coordinate of the point to get a vertex for.
             </param>
            
             <param name="vertex">
             Where the <see cref="T:Microsoft.Chung.Core.IVertex"/> object gets stored.
             </param>
            
             <returns>
            	true if a vertex containing the point was found, false if not.
             </returns>
            
             <remarks>
             This method looks for a vertex that contains the point
             (<paramref name="x"/>, <paramref name="y"/>).  If there is such a
             vertex, the vertex is stored at <paramref name="vertex"/> and true is
            	returned.  Otherwise, <paramref name="vertex"/> is set to null and
            	false is returned.
            
            	<para>
             If the graph hasn't been drawn yet, false is returned.
            	</para>
            
             <para>
            	The <see cref="M:Microsoft.Chung.Visualization.IVertexDrawer.VertexContainsPoint(Microsoft.Chung.Core.IVertex,System.Drawing.Point)"/> method on the <see cref="P:Microsoft.Chung.Visualization.ChungControl.VertexDrawer"/> object is used to determine which vertex, if
            	any, contains the point.
             </para>
            
             <para>
             An exception is thrown if an asynchronous drawing is in progress.
             Check <see cref="P:Microsoft.Chung.Visualization.ChungControl.IsDrawing"/> before calling this method.
             </para>
            
             </remarks>
        </member>
        <member name="M:Microsoft.Chung.Visualization.ChungControl.CopyBitmap">
             <summary>
             Gets a copy of the <see cref="T:System.Drawing.Bitmap"/> displayed within the control.
             </summary>
            
             <returns>
             A copy of the <see cref="T:System.Drawing.Bitmap"/> displayed within the control.  The
             bitmap is the size of the control's client area.
             </returns>
            
             <remarks>
             If the graph hasn't been drawn yet, a <see cref="T:System.Drawing.Bitmap"/> filled with
             white is returned.
             </remarks>
        </member>
        <member name="M:Microsoft.Chung.Visualization.ChungControl.CreateMultiSelectionGraphDrawer">
            <summary>
            Creates the MultiSelectionGraphDrawer that will draw the graph.
            </summary>
        </member>
        <member name="M:Microsoft.Chung.Visualization.ChungControl.CreatePictureBox">
            <summary>
            Creates the PictureBox that will display the graph.
            </summary>
        </member>
        <member name="M:Microsoft.Chung.Visualization.ChungControl.CreateDrawAsyncTimer">
            <summary>
            Creates the Timer that is used to start asynchronous drawings.
            </summary>
        </member>
        <member name="M:Microsoft.Chung.Visualization.ChungControl.TryGetDrawingSize(System.Drawing.Size@)">
             <summary>
             Attempts to get the size to use for a graph bitmap, taking autoscroll
             settings into consideration.
             </summary>
            
             <param name="oSize">
             Where the size gets stored if true is returned.
             </param>
            
             <returns>
            	true if a non-zero size was obtained, false if the client window is too
             small to display a bitmap.
             </returns>
        </member>
        <member name="M:Microsoft.Chung.Visualization.ChungControl.CreateBitmap(System.Drawing.Size)">
             <summary>
            	Creates a Bitmap of a specified size.
             </summary>
            
             <param name="oSize">
             Size of the Bitmap to create.
             </param>
            
             <returns>
            	A new Bitmap.
             </returns>
        </member>
        <member name="M:Microsoft.Chung.Visualization.ChungControl.DrawWaitMessage(System.Drawing.Bitmap)">
             <summary>
             Draws a string on a bitmap telling the user to wait while the graph is
             being laid out.
             </summary>
            
             <param name="oBitmap">
             Bitmap to draw onto.
             </param>
        </member>
        <member name="M:Microsoft.Chung.Visualization.ChungControl.FireSelectionChanged">
            <summary>
            Fires the <see cref="E:Microsoft.Chung.Visualization.ChungControl.SelectionChanged"/> event if appropriate.
            </summary>
        </member>
        <member name="M:Microsoft.Chung.Visualization.ChungControl.FireGraphMouseDown(System.Windows.Forms.MouseEventArgs,Microsoft.Chung.Core.IVertex)">
             <summary>
            	Fires the <see cref="E:Microsoft.Chung.Visualization.ChungControl.GraphMouseDown"/> event if appropriate.
             </summary>
            
             <param name="oMouseEventArgs">
             Standard mouse event arguments.
             </param>
            
             <param name="oVertex">
             Clicked vertex if the user clicked on a vertex, or null if he didn't.
             </param>
        </member>
        <member name="M:Microsoft.Chung.Visualization.ChungControl.FireGraphMouseUp(System.Windows.Forms.MouseEventArgs,Microsoft.Chung.Core.IVertex)">
             <summary>
            	Fires the <see cref="E:Microsoft.Chung.Visualization.ChungControl.GraphMouseUp"/> event if appropriate.
             </summary>
            
             <param name="oMouseEventArgs">
             Standard mouse event arguments.
             </param>
            
             <param name="oVertex">
             Clicked vertex if the user clicked on a vertex, or null if he didn't.
             </param>
        </member>
        <member name="M:Microsoft.Chung.Visualization.ChungControl.FireVertexClick(Microsoft.Chung.Core.IVertex)">
             <summary>
            	Fires the <see cref="E:Microsoft.Chung.Visualization.ChungControl.VertexClick"/> event if appropriate.
             </summary>
            
             <param name="oVertex">
             Clicked vertex.  Can't be null.
             </param>
        </member>
        <member name="M:Microsoft.Chung.Visualization.ChungControl.FireVertexDoubleClick(Microsoft.Chung.Core.IVertex)">
             <summary>
            	Fires the <see cref="E:Microsoft.Chung.Visualization.ChungControl.VertexDoubleClick"/> event if appropriate.
             </summary>
            
             <param name="oVertex">
             Double-clicked vertex.  Can't be null.
             </param>
        </member>
        <member name="M:Microsoft.Chung.Visualization.ChungControl.FireVertexEvent(Microsoft.Chung.Core.VertexEventHandler,Microsoft.Chung.Core.IVertex)">
             <summary>
            	Fires an event with the signature VertexEventHandler.
             </summary>
            
             <param name="oVertexEventHandler">
             Event handler, or null if the event isn't being handled.
             </param>
            
             <param name="oVertex">
             Vertex associated with the event.  Can't be null.
             </param>
        </member>
        <member name="M:Microsoft.Chung.Visualization.ChungControl.FireGraphMouseEvent(Microsoft.Chung.Visualization.ChungControl.GraphMouseEventHandler,System.Windows.Forms.MouseEventArgs,Microsoft.Chung.Core.IVertex)">
             <summary>
            	Fires an event with the signature GroupMouseEventHandler.
             </summary>
            
             <param name="oGraphMouseEventHandler">
             Event handler, or null if the event isn't being handled.
             </param>
            
             <param name="oMouseEventArgs">
             Standard mouse event arguments.
             </param>
            
             <param name="oVertex">
             Vertex associated with the event.  Can be null.
             </param>
        </member>
        <member name="M:Microsoft.Chung.Visualization.ChungControl.FireDrawingGraph">
            <summary>
            Fires the <see cref="E:Microsoft.Chung.Visualization.ChungControl.DrawingGraph"/> event if appropriate.
            </summary>
        </member>
        <member name="M:Microsoft.Chung.Visualization.ChungControl.FireGraphDrawn">
            <summary>
            Fires the <see cref="E:Microsoft.Chung.Visualization.ChungControl.GraphDrawn"/> event if appropriate.
            </summary>
        </member>
        <member name="M:Microsoft.Chung.Visualization.ChungControl.StartOrScheduleDraw(Microsoft.Chung.Visualization.ChungControl.DrawType)">
             <summary>
             Starts or schedules a drawing operation.
             </summary>
            
             <param name="eDrawType">
             Specifies the type of draw operation.
             </param>
        </member>
        <member name="M:Microsoft.Chung.Visualization.ChungControl.StartDraw(Microsoft.Chung.Visualization.ChungControl.DrawType)">
             <summary>
            	Starts an asynchronous draw operation.
             </summary>
            
             <param name="eDrawType">
             Specifies the type of draw operation.
             </param>
            
             <remarks>
            	Do not call this if the MultiSelectionGraphDrawer.IsBusy flag is true.
             </remarks>
        </member>
        <member name="M:Microsoft.Chung.Visualization.ChungControl.ScheduleDraw(Microsoft.Chung.Visualization.ChungControl.DrawType)">
             <summary>
             Schedules a drawing operation.
             </summary>
            
             <param name="eDrawType">
             Specifies the type of draw operation.
             </param>
        </member>
        <member name="M:Microsoft.Chung.Visualization.ChungControl.UpdateBitmapWithSelection">
            <summary>
            Copies the "no selection" bitmap to the "with selection" bitmap,
            redraws the selected vertices and edges, and updates the PictureBox.
            </summary>
        </member>
        <member name="M:Microsoft.Chung.Visualization.ChungControl.SetVertexSelectedState(Microsoft.Chung.Core.IVertex,System.Boolean)">
             <summary>
             Sets the selected state of a vertex and updates the internal collection
             of selected vertices.
             </summary>
            
             <param name="oVertex">
             Vertex to select or deselect.  Can't be null.
             </param>
            
             <param name="bSelected">
             true to select <paramref name="oVertex" />, false to deselect it.
             </param>
        </member>
        <member name="M:Microsoft.Chung.Visualization.ChungControl.SetVertexSelectedStateAll(System.Boolean)">
             <summary>
             Sets the selected state of all vertices and updates the internal
             collection of selected vertices.
             </summary>
            
             <param name="bSelected">
             true to select all vertices, false to deselect them.
             </param>
        </member>
        <member name="M:Microsoft.Chung.Visualization.ChungControl.SetEdgeSelectedState(Microsoft.Chung.Core.IEdge,System.Boolean)">
             <summary>
             Sets the selected state of an edge and updates the internal collection
             of selected edges.
             </summary>
            
             <param name="oEdge">
             Edge to select or deselect.  Can't be null.
             </param>
            
             <param name="bSelected">
             true to select <paramref name="oEdge" />, false to deselect it.
             </param>
        </member>
        <member name="M:Microsoft.Chung.Visualization.ChungControl.SetEdgeSelectedStateAll(System.Boolean)">
             <summary>
             Sets the selected state of all edges and updates the internal
             collection of selected edges.
             </summary>
            
             <param name="bSelected">
             true to select all edges, false to deselect them.
             </param>
        </member>
        <member name="M:Microsoft.Chung.Visualization.ChungControl.DrawSelection(System.Drawing.Bitmap)">
             <summary>
             Draws the selected vertices and edges.
             </summary>
            
             <param name="oBitmap">
             Bitmap to draw on.
             </param>
        </member>
        <member name="M:Microsoft.Chung.Visualization.ChungControl.LeftButtonIsPressed(System.Windows.Forms.MouseEventArgs)">
             <summary>
            	Determines whether the left mouse button is pressed.
             </summary>
            
             <param name="oMouseEventArgs">
             Standard mouse event arguments.
             </param>
            
             <returns>
             true if the left mouse button is pressed.
             </returns>
        </member>
        <member name="M:Microsoft.Chung.Visualization.ChungControl.OnBitmapNoSelectionDrawn">
             <summary>
            	Performs tasks required after the graph is drawn onto
             m_oBitmapNoSelection.
             </summary>
            
             <remarks>
            	It's assumed that the bitmap in m_oPictureBox is the "no selection"
             bitmap, m_oBitmapNoSelection.
             </remarks>
        </member>
        <member name="M:Microsoft.Chung.Visualization.ChungControl.OnResize(System.EventArgs)">
             <summary>
             Handles the Resize event.
             </summary>
            
             <param name="oEventArgs">
             Standard event arguments.
             </param>
        </member>
        <member name="M:Microsoft.Chung.Visualization.ChungControl.OnLayoutOrRedrawRequired(System.Boolean)">
             <summary>
            	Handles the LayoutRequired and RedrawRequired events on the
             m_oMultiSelectionGraphDrawer
             </summary>
            
             <param name="bOnLayoutRequired">
             true if this is being called in response to a LayoutRequired event,
             false if it is being called in response to a RedrawRequired event.
             </param>
        </member>
        <member name="M:Microsoft.Chung.Visualization.ChungControl.Dispose(System.Boolean)">
             <summary>
            	Frees resources.  Call this when you are done with the object.
             </summary>
            
             <param name="bDisposing">
             See Component.Dispose().
             </param>
        </member>
        <member name="M:Microsoft.Chung.Visualization.ChungControl.m_oPictureBox_MouseDown(System.Object,System.Windows.Forms.MouseEventArgs)">
             <summary>
            	Handles the MouseDown event on the m_oPictureBox object.
             </summary>
            
             <param name="oSource">
             Source of the event.
             </param>
            
             <param name="oMouseEventArgs">
             Standard mouse event arguments.
             </param>
        </member>
        <member name="M:Microsoft.Chung.Visualization.ChungControl.m_oPictureBox_MouseMove(System.Object,System.Windows.Forms.MouseEventArgs)">
             <summary>
            	Handles the MouseMove event on the m_oPictureBox object.
             </summary>
            
             <param name="oSource">
             Source of the event.
             </param>
            
             <param name="oMouseEventArgs">
             Standard mouse event arguments.
             </param>
        </member>
        <member name="M:Microsoft.Chung.Visualization.ChungControl.m_oPictureBox_MouseUp(System.Object,System.Windows.Forms.MouseEventArgs)">
             <summary>
            	Handles the MouseUp event on the m_oPictureBox object.
             </summary>
            
             <param name="oSource">
             Source of the event.
             </param>
            
             <param name="oMouseEventArgs">
             Standard mouse event arguments.
             </param>
        </member>
        <member name="M:Microsoft.Chung.Visualization.ChungControl.m_oPictureBox_DoubleClick(System.Object,System.EventArgs)">
             <summary>
            	Handles the DoubleClick event on the m_oPictureBox object.
             </summary>
            
             <param name="oSource">
             Source of the event.
             </param>
            
             <param name="oEventArgs">
             Standard event arguments.
             </param>
        </member>
        <member name="M:Microsoft.Chung.Visualization.ChungControl.MultiSelectionGraphDrawer_DrawAsyncIterationCompleted(System.Object,System.EventArgs)">
             <summary>
            	Handles the DrawAsyncIterationCompleted event on the
             m_oMultiSelectionGraphDrawer object.
             </summary>
            
             <param name="oSender">
             Source of the event.
             </param>
            
             <param name="oEventArgs">
             Standard event arguments.
             </param>
        </member>
        <member name="M:Microsoft.Chung.Visualization.ChungControl.MultiSelectionGraphDrawer_DrawAsyncCompleted(System.Object,System.ComponentModel.AsyncCompletedEventArgs)">
             <summary>
            	Handles the DrawAsyncCompleted event on the
             m_oMultiSelectionGraphDrawer object.
             </summary>
            
             <param name="oSender">
             Source of the event.
             </param>
            
             <param name="oAsyncCompletedEventArgs">
             Standard event arguments.
             </param>
        </member>
        <member name="M:Microsoft.Chung.Visualization.ChungControl.MultiSelectionGraphDrawer_LayoutRequired(System.Object,System.EventArgs)">
             <summary>
            	Handles the LayoutRequired event on the m_oMultiSelectionGraphDrawer
             object.
             </summary>
            
             <param name="oSender">
             Source of the event.
             </param>
            
             <param name="oEventArgs">
             Standard event arguments.
             </param>
        </member>
        <member name="M:Microsoft.Chung.Visualization.ChungControl.MultiSelectionGraphDrawer_RedrawRequired(System.Object,System.EventArgs)">
             <summary>
            	Handles the RedrawRequired event on the m_oMultiSelectionGraphDrawer
             object.
             </summary>
            
             <param name="oSender">
             Source of the event.
             </param>
            
             <param name="oEventArgs">
             Standard event arguments.
             </param>
        </member>
        <member name="M:Microsoft.Chung.Visualization.ChungControl.DrawAsyncTimer_Tick(System.Object,System.EventArgs)">
             <summary>
            	Handles the Tick event on the m_oDrawAsyncTimer object.
             </summary>
            
             <param name="oSender">
             Source of the event.
             </param>
            
             <param name="oEventArgs">
             Standard event arguments.
             </param>
        </member>
        <member name="M:Microsoft.Chung.Visualization.ChungControl.TraceEvent(System.String,System.String)">
             <summary>
             Writes a message describing the state of the control.
             </summary>
            
             <param name="sMethodOrPropertyName">
             Name of the method or property calling this method.
             </param>
            
             <param name="sEventDescription">
             Description of the event.
             </param>
        </member>
        <member name="M:Microsoft.Chung.Visualization.ChungControl.AssertValid">
            <summary>
            Asserts if the object is in an invalid state.  Debug-only.
            </summary>
        </member>
        <member name="F:Microsoft.Chung.Visualization.ChungControl.DraggedVertexAndEdgeColor">
            Color of a dragged vertex and its incident edges.
        </member>
        <member name="F:Microsoft.Chung.Visualization.ChungControl.m_oMultiSelectionGraphDrawer">
            Object that does all of the drawing.
        </member>
        <member name="F:Microsoft.Chung.Visualization.ChungControl.m_oBitmapNoSelection">
             Here is how the control's drawing scheme works:
            
             When StartDraw() is called, m_oBitmapNoSelection is created with
             an appropriate size, and m_oMultiSelectionGraphDrawer asynchronously
             draws the graph on it without showing any vertices or edges as
             selected.  When the drawing is done,
             MultiSelectionGraphDrawer_DrawAsyncCompleted() copies
             m_oBitmapNoSelection to m_oBitmapWithSelection.  If there are any
             selected vertices or edges, m_oMultiSelectionGraphDrawer is told to
             redraw the selected vertices and edges as selected on
             m_oBitmapWithSelection.  m_oBitmapWithSelection is then loaded into
             m_oPictureBox.
            
             If the selection changes, either programatically or with the mouse,
             m_oBitmapNoSelection is again copied to m_oBitmapWithSelection, and
             m_oMultiSelectionGraphDrawer is told to redraw the selected vertices
             and edges as selected on m_oBitmapWithSelection.
            
             This scheme allows the selection to be quickly changed without
             redrawing the entire graph, at the expense of keeping two bitmaps in
             memory.
            
             An alternative scheme would be to use just one bitmap, and have
             m_oMultiSelectionGraphDrawer redraw the old selected vertices as
             unselected before drawing the new selected vertices as selected.  This
             doesn't work, for several reasons.  First, MultiSelectionGraphDrawer
             uses anti-aliasing to smooth the vertices and edges.  It also uses
             different colors and line widths for selected vs.  unselected.  Even
             without the different widths, the anti-aliasing is a problem.  If you
             draw a red anti-aliased line on top of a black anti-aliased line, for
             example, the resulting line is not as red as it should be.  And if you
             draw black on top of the red, the red doesn't all disappear.
            
        </member>
        <member name="F:Microsoft.Chung.Visualization.ChungControl.m_oBitmapWithSelection">
            
        </member>
        <member name="F:Microsoft.Chung.Visualization.ChungControl.m_oPictureBox">
            PictureBox that contains m_oBitmapWithSelection.
        </member>
        <member name="F:Microsoft.Chung.Visualization.ChungControl.m_bAllowSelectionWithMouse">
            true if vertices can be selected and deselected with the mouse.
        </member>
        <member name="F:Microsoft.Chung.Visualization.ChungControl.m_bAllowVertexDrag">
            true if a vertex can be moved by dragging it with the mouse.
        </member>
        <member name="F:Microsoft.Chung.Visualization.ChungControl.m_oVertexBeingDragged">
            Vertex the user is dragging with the mouse, or null if a vertex isn't
            being dragged.
        </member>
        <member name="F:Microsoft.Chung.Visualization.ChungControl.m_oSelectedVertices">
            Selected vertices and edges.
        </member>
        <member name="F:Microsoft.Chung.Visualization.ChungControl.m_oSelectedEdges">
            
        </member>
        <member name="F:Microsoft.Chung.Visualization.ChungControl.m_bInBeginUpdate">
            Gets set to true by BeginUpdate(), false by EndUpdate().
        </member>
        <member name="F:Microsoft.Chung.Visualization.ChungControl.m_eDrawType">
            Specifies the type of draw operation performed by StartDraw().
        </member>
        <member name="F:Microsoft.Chung.Visualization.ChungControl.m_oDrawAsyncTimer">
            Used by the ScheduleDraw() method.
        </member>
        <member name="P:Microsoft.Chung.Visualization.ChungControl.Graph">
             <summary>
             Gets or sets the graph to draw.
             </summary>
            
             <value>
             The graph to draw, as an <see cref="T:Microsoft.Chung.Core.IGraph"/>.
             </value>
            
             <remarks>
            	Do not set this property to a graph that is already owned by another
             graph drawer.  If you want to simultaneously draw the same graph with
             two different graph drawers, make a copy of the graph using
             IGraph.<see cref="M:Microsoft.Chung.Core.IGraph.Clone(System.Boolean,System.Boolean)"/>.
            
             <para>
             An exception is thrown if this property is set while an asynchronous
             drawing is in progress.  Check <see cref="P:Microsoft.Chung.Visualization.ChungControl.IsDrawing"/> before using
             this property.
             </para>
            
             </remarks>
        </member>
        <member name="P:Microsoft.Chung.Visualization.ChungControl.Layout">
             <summary>
             Gets or sets the object to use to lay out the graph.
             </summary>
            
             <value>
             The object to use to lay out the graph, as an <see cref="T:Microsoft.Chung.Visualization.ILayout"/>.
             The default value is a <see cref="T:Microsoft.Chung.Visualization.SugiyamaLayout"/> object.
             </value>
            
             <remarks>
             An exception is thrown if this property is set while an asynchronous
             drawing is in progress.  Check <see cref="P:Microsoft.Chung.Visualization.ChungControl.IsDrawing"/> before using
             this property.
             </remarks>
        </member>
        <member name="P:Microsoft.Chung.Visualization.ChungControl.VertexDrawer">
             <summary>
             Gets or sets the object to use to draw the graph's vertices.
             </summary>
            
             <value>
             The object to use to draw the graph's vertices, as an <see cref="T:Microsoft.Chung.Visualization.IVertexDrawer"/>.  The default value is a <see cref="P:Microsoft.Chung.Visualization.ChungControl.VertexDrawer"/> object.
             </value>
        </member>
        <member name="P:Microsoft.Chung.Visualization.ChungControl.EdgeDrawer">
             <summary>
             Gets or sets the object to use to draw the graph's edges.
             </summary>
            
             <value>
             The object to use to draw the graph's edges, as an <see cref="T:Microsoft.Chung.Visualization.IEdgeDrawer"/>.  The default value is an <see cref="P:Microsoft.Chung.Visualization.ChungControl.EdgeDrawer"/> object.
             </value>
        </member>
        <member name="P:Microsoft.Chung.Visualization.ChungControl.BackColor">
             <summary>
             Gets or sets the graph's background color.
             </summary>
            
             <value>
             The graph's background color, as a <see cref="T:System.Drawing.Color"/>.  The default
             value is SystemColors.<see cref="P:System.Drawing.SystemColors.Window"/>.
             </value>
        </member>
        <member name="P:Microsoft.Chung.Visualization.ChungControl.AllowSelectionWithMouse">
             <summary>
             Gets or sets a flag indicating whether vertices can be selected with
             the mouse.
             </summary>
            
             <value>
             true if vertices can be selected with the mouse.  The default value is
             true.
             </value>
            
             <remarks>
             When this property is true, one or more vertices can be selected with
             the mouse.  If the control key is not pressed, clicking a vertex
             deselects any selected vertices and edges, then selects the clicked
             vertex and its incident edges.  If the control key is pressed, clicking
             a vertex toggles the selection state of the vertex and its incident
             edges without affecting the other vertices and edges.  Clicking without
             the control key on an area not occupied by a vertex deselects all
             vertices and edges.
            
             <para>
             When this property is true, clicking on a vertex results in the
             following sequence:
             </para>
            
            	<list type="bullet">
            
             <item><description>
             The <see cref="E:Microsoft.Chung.Visualization.ChungControl.GraphMouseDown"/> event fires.
             </description></item>
            
             <item><description>
             The <see cref="E:Microsoft.Chung.Visualization.ChungControl.VertexClick"/> event fires.
             </description></item>
            
             <item><description>
             The vertex and its incident edges are redrawn as selected or
             unselected.
             </description></item>
            
             <item><description>
             The <see cref="E:Microsoft.Chung.Visualization.ChungControl.SelectionChanged"/> event fires.
             </description></item>
            
             <item><description>
             The <see cref="E:Microsoft.Chung.Visualization.ChungControl.GraphMouseUp"/> event fires.
             </description></item>
            
            	</list>
            
             <para>
             When this property is false, clicking on a vertex results in the
             following sequence:
             </para>
            
            	<list type="bullet">
            
             <item><description>
             The <see cref="E:Microsoft.Chung.Visualization.ChungControl.GraphMouseDown"/> event fires.
             </description></item>
            
             <item><description>
             The <see cref="E:Microsoft.Chung.Visualization.ChungControl.VertexClick"/> event fires.
             </description></item>
            
             <item><description>
             The <see cref="E:Microsoft.Chung.Visualization.ChungControl.GraphMouseUp"/> event fires.
             </description></item>
            
            	</list>
            
             <para>
             Set this property to false if you want mouse clicks to have no effect,
             or if you want to customize the click behavior.
             </para>
            
             </remarks>
            
             <seealso cref="M:Microsoft.Chung.Visualization.ChungControl.SetVertexSelected(Microsoft.Chung.Core.IVertex,System.Boolean,System.Boolean)"/>
             <seealso cref="M:Microsoft.Chung.Visualization.ChungControl.SetEdgeSelected(Microsoft.Chung.Core.IEdge,System.Boolean,System.Boolean)"/>
             <seealso cref="M:Microsoft.Chung.Visualization.ChungControl.SetSelected(Microsoft.Chung.Core.IVertex[],Microsoft.Chung.Core.IEdge[])"/>
             <seealso cref="M:Microsoft.Chung.Visualization.ChungControl.ClearSelection"/>
             <seealso cref="P:Microsoft.Chung.Visualization.ChungControl.SelectedVertices"/>
             <seealso cref="P:Microsoft.Chung.Visualization.ChungControl.SelectedEdges"/>
             <seealso cref="E:Microsoft.Chung.Visualization.ChungControl.SelectionChanged"/>
        </member>
        <member name="P:Microsoft.Chung.Visualization.ChungControl.AllowVertexDrag">
             <summary>
             Gets or sets a flag indicating whether a vertex can be moved by
             dragging it with the mouse.
             </summary>
            
             <value>
             true if a vertex can be moved by dragging it with the mouse, false
             otherwise.  The default value is true.
             </value>
            
             <remarks>
             When this property is true, the user can click on a vertex and move it
             while dragging the mouse.  The vertex and its incident edges are
             redrawn, but no other vertices or edges are affected.
             </remarks>
        </member>
        <member name="P:Microsoft.Chung.Visualization.ChungControl.SelectedVertices">
             <summary>
             Gets an array of the graph's selected vertices.
             </summary>
            
             <value>
             An array of the graph's selected vertices.
             </value>
            
             <remarks>
             If there are no selected vertices, the returned array has zero
             elements.  The returned value is never null.
             </remarks>
            
             <seealso cref="P:Microsoft.Chung.Visualization.ChungControl.AllowSelectionWithMouse"/>
             <seealso cref="M:Microsoft.Chung.Visualization.ChungControl.SetVertexSelected(Microsoft.Chung.Core.IVertex,System.Boolean,System.Boolean)"/>
             <seealso cref="M:Microsoft.Chung.Visualization.ChungControl.SetEdgeSelected(Microsoft.Chung.Core.IEdge,System.Boolean,System.Boolean)"/>
             <seealso cref="M:Microsoft.Chung.Visualization.ChungControl.SetSelected(Microsoft.Chung.Core.IVertex[],Microsoft.Chung.Core.IEdge[])"/>
             <seealso cref="M:Microsoft.Chung.Visualization.ChungControl.ClearSelection"/>
             <seealso cref="P:Microsoft.Chung.Visualization.ChungControl.SelectedEdges"/>
             <seealso cref="E:Microsoft.Chung.Visualization.ChungControl.SelectionChanged"/>
        </member>
        <member name="P:Microsoft.Chung.Visualization.ChungControl.SelectedEdges">
             <summary>
             Gets an array of the graph's selected edges.
             </summary>
            
             <value>
             An array of the graph's selected edges.
             </value>
            
             <remarks>
             If there are no selected edges, the returned array has zero elements.
             The returned value is never null.
             </remarks>
            
             <seealso cref="P:Microsoft.Chung.Visualization.ChungControl.AllowSelectionWithMouse"/>
             <seealso cref="M:Microsoft.Chung.Visualization.ChungControl.SetVertexSelected(Microsoft.Chung.Core.IVertex,System.Boolean,System.Boolean)"/>
             <seealso cref="M:Microsoft.Chung.Visualization.ChungControl.SetEdgeSelected(Microsoft.Chung.Core.IEdge,System.Boolean,System.Boolean)"/>
             <seealso cref="M:Microsoft.Chung.Visualization.ChungControl.SetSelected(Microsoft.Chung.Core.IVertex[],Microsoft.Chung.Core.IEdge[])"/>
             <seealso cref="M:Microsoft.Chung.Visualization.ChungControl.ClearSelection"/>
             <seealso cref="P:Microsoft.Chung.Visualization.ChungControl.SelectedVertices"/>
             <seealso cref="E:Microsoft.Chung.Visualization.ChungControl.SelectionChanged"/>
        </member>
        <member name="P:Microsoft.Chung.Visualization.ChungControl.IsDrawing">
             <summary>
             Gets a value indicating whether an asynchronous drawing operation is in
             progress.
             </summary>
            
             <value>
             true if an asynchronous drawing operation is in progress.
             </value>
            
             <remarks>
             The <see cref="E:Microsoft.Chung.Visualization.ChungControl.DrawingGraph"/> event fires before graph drawing
             begins.  The <see cref="E:Microsoft.Chung.Visualization.ChungControl.GraphDrawn"/> event fires after graph drawing
             completes.
             </remarks>
        </member>
        <member name="E:Microsoft.Chung.Visualization.ChungControl.SelectionChanged">
             <summary>
            	Occurs when the selection state of a vertex or edge changes.
             </summary>
            
             <remarks>
             This event occurs when one or more of the graph's vertices or edges are
             selected or deselected.  Updated arrays of the graph's selected
             vertices and edges can be obtained from the <see cref="P:Microsoft.Chung.Visualization.ChungControl.SelectedVertices"/> and <see cref="P:Microsoft.Chung.Visualization.ChungControl.SelectedEdges"/> properties.
             </remarks>
            
             <seealso cref="P:Microsoft.Chung.Visualization.ChungControl.AllowSelectionWithMouse"/>
             <seealso cref="M:Microsoft.Chung.Visualization.ChungControl.SetVertexSelected(Microsoft.Chung.Core.IVertex,System.Boolean,System.Boolean)"/>
             <seealso cref="M:Microsoft.Chung.Visualization.ChungControl.SetEdgeSelected(Microsoft.Chung.Core.IEdge,System.Boolean,System.Boolean)"/>
             <seealso cref="M:Microsoft.Chung.Visualization.ChungControl.SetSelected(Microsoft.Chung.Core.IVertex[],Microsoft.Chung.Core.IEdge[])"/>
             <seealso cref="M:Microsoft.Chung.Visualization.ChungControl.ClearSelection"/>
             <seealso cref="P:Microsoft.Chung.Visualization.ChungControl.SelectedVertices"/>
             <seealso cref="P:Microsoft.Chung.Visualization.ChungControl.SelectedEdges"/>
        </member>
        <member name="E:Microsoft.Chung.Visualization.ChungControl.GraphMouseDown">
             <summary>
            	Occurs when the mouse pointer is within the graph and a mouse button
            	is pressed.
             </summary>
            
             <remarks>
             See <see cref="P:Microsoft.Chung.Visualization.ChungControl.AllowSelectionWithMouse"/> for details on how vertices
             are selected with the mouse.
             </remarks>
            
             <seealso cref="P:Microsoft.Chung.Visualization.ChungControl.AllowSelectionWithMouse"/>
             <seealso cref="M:Microsoft.Chung.Visualization.ChungControl.SetVertexSelected(Microsoft.Chung.Core.IVertex,System.Boolean,System.Boolean)"/>
             <seealso cref="M:Microsoft.Chung.Visualization.ChungControl.SetEdgeSelected(Microsoft.Chung.Core.IEdge,System.Boolean,System.Boolean)"/>
             <seealso cref="M:Microsoft.Chung.Visualization.ChungControl.SetSelected(Microsoft.Chung.Core.IVertex[],Microsoft.Chung.Core.IEdge[])"/>
             <seealso cref="M:Microsoft.Chung.Visualization.ChungControl.ClearSelection"/>
             <seealso cref="P:Microsoft.Chung.Visualization.ChungControl.SelectedVertices"/>
             <seealso cref="P:Microsoft.Chung.Visualization.ChungControl.SelectedEdges"/>
        </member>
        <member name="E:Microsoft.Chung.Visualization.ChungControl.GraphMouseUp">
             <summary>
            	Occurs when the mouse pointer is within the graph and a mouse button
            	is released.
             </summary>
            
             <seealso cref="P:Microsoft.Chung.Visualization.ChungControl.AllowSelectionWithMouse"/>
            	<seealso cref="P:Microsoft.Chung.Visualization.ChungControl.SelectedVertices"/>
        </member>
        <member name="E:Microsoft.Chung.Visualization.ChungControl.VertexClick">
             <summary>
            	Occurs when a vertex is clicked.
             </summary>
            
             <seealso cref="P:Microsoft.Chung.Visualization.ChungControl.AllowSelectionWithMouse"/>
            	<seealso cref="P:Microsoft.Chung.Visualization.ChungControl.SelectedVertices"/>
        </member>
        <member name="E:Microsoft.Chung.Visualization.ChungControl.VertexDoubleClick">
             <summary>
            	Occurs when a vertex is double-clicked.
             </summary>
            
             <seealso cref="P:Microsoft.Chung.Visualization.ChungControl.AllowSelectionWithMouse"/>
            	<seealso cref="P:Microsoft.Chung.Visualization.ChungControl.SelectedVertices"/>
        </member>
        <member name="E:Microsoft.Chung.Visualization.ChungControl.DrawingGraph">
             <summary>
            	Occurs before graph drawing begins.
             </summary>
            
             <remarks>
             Graph drawing occurs asynchronously.  This event fires before graph
             drawing begins.
            
             <para>
             The <see cref="E:Microsoft.Chung.Visualization.ChungControl.GraphDrawn"/> event fires after drawing is complete.
             </para>
            
             <para>
             The <see cref="P:Microsoft.Chung.Visualization.ChungControl.IsDrawing"/> property can also be used to determine
             whether a graph is being drawn.
             </para>
            
             </remarks>
        </member>
        <member name="E:Microsoft.Chung.Visualization.ChungControl.GraphDrawn">
             <summary>
            	Occurs after graph drawing completes.
             </summary>
            
             <remarks>
             Graph drawing occurs asynchronously.  This event fires when the graph
             is completely drawn.
            
             <para>
             The <see cref="E:Microsoft.Chung.Visualization.ChungControl.DrawingGraph"/> event fires before graph drawing
             begins.
             </para>
            
             <para>
             The <see cref="P:Microsoft.Chung.Visualization.ChungControl.IsDrawing"/> property can also be used to determine
             whether a graph is being drawn.
             </para>
            
             </remarks>
        </member>
        <member name="P:Microsoft.Chung.Visualization.ChungControl.ClassName">
             <summary>
             Gets the full name of the class.
             </summary>
            
             <value>
             The full name of the class, suitable for use in error messages.
             </value>
        </member>
        <member name="P:Microsoft.Chung.Visualization.ChungControl.ArgumentChecker">
             <summary>
             Gets a new initialized <see cref="P:Microsoft.Chung.Visualization.ChungControl.ArgumentChecker"/> object.
             </summary>
            
             <value>
             A new initialized <see cref="P:Microsoft.Chung.Visualization.ChungControl.ArgumentChecker"/> object.
             </value>
            
             <remarks>
             The returned object can be used to check the validity of property
             values and method parameters.
             </remarks>
        </member>
        <member name="T:Microsoft.Chung.Visualization.ChungControl.GraphMouseEventHandler">
             <summary>
            	Represents a method that will handle the <see cref="E:Microsoft.Chung.Visualization.ChungControl.GraphMouseDown"/>
            	or <see cref="E:Microsoft.Chung.Visualization.ChungControl.GraphMouseUp"/> event fired by the <see cref="T:Microsoft.Chung.Visualization.ChungControl"/>.
             </summary>
            
             <param name="sender">
             The <see cref="T:Microsoft.Chung.Visualization.ChungControl"/> that fired the event.
             </param>
            
             <param name="e">
             Provides information about the mouse and the part of the graph that was
             clicked.
             </param>
        </member>
        <member name="T:Microsoft.Chung.Visualization.ChungControl.DrawType">
            <summary>
            Specifies the type of draw operation performed by <see cref="M:Microsoft.Chung.Visualization.ChungControl.StartDraw(Microsoft.Chung.Visualization.ChungControl.DrawType)"/>.
            </summary>
        </member>
        <member name="F:Microsoft.Chung.Visualization.ChungControl.DrawType.DrawOnly">
            <summary>
            Synchronously draw the graph only.  Do not modify the layout.
            </summary>
        </member>
        <member name="F:Microsoft.Chung.Visualization.ChungControl.DrawType.TransformLayoutAndDraw">
            <summary>
            Synchronously transform the previous layout and draw the graph.
            </summary>
        </member>
        <member name="F:Microsoft.Chung.Visualization.ChungControl.DrawType.AsyncLayoutAndDraw">
            <summary>
            Asynchronously lay out and draw the graph.
            </summary>
        </member>
        <member name="T:Microsoft.Research.CommunityTechnologies.AppLib.ArgumentChecker">
             <summary>
             Contains methods that check method arguments and property values.
             </summary>
            
             <remarks>
             This can be used by a class that wants to check values passed to its
             property setters and arguments passed to its methods.  The CheckXXX()
             methods in this class throw an exception if a parameter value or method
             argument is invalid.
            
             <para>
             This class is marked internal to avoid compiler error CS0433 ("The
             type ... exists in both ...") when an executable references two or more
             assemblies that use this class.
             </para>
            
             </remarks>
        </member>
        <member name="M:Microsoft.Research.CommunityTechnologies.AppLib.ArgumentChecker.#ctor(System.String)">
             <summary>
             Initializes a new instance of the ArgumentChecker class.
             </summary>
            
             <param name="sOwnerClassName">
             Class name of the object that created this object.  The class name gets
             prepended to all exception messages.  Sample: "MyClass".
             </param>
        </member>
        <member name="M:Microsoft.Research.CommunityTechnologies.AppLib.ArgumentChecker.CheckPropertyNotNull(System.String,System.Object)">
             <summary>
             Throws an exception if a property value is null.
             </summary>
            
             <param name="sPropertyName">
             Name of the property.
             </param>
            
             <param name="oPropertyValue">
             Property value to check.
             </param>
        </member>
        <member name="M:Microsoft.Research.CommunityTechnologies.AppLib.ArgumentChecker.CheckPropertyNotEmpty(System.String,System.String)">
             <summary>
             Throws an exception if a string property value is null or has a length
             of zero.
             </summary>
            
             <param name="sPropertyName">
             Name of the string property.
             </param>
            
             <param name="sPropertyValue">
             Property value to check.
             </param>
        </member>
        <member name="M:Microsoft.Research.CommunityTechnologies.AppLib.ArgumentChecker.CheckPropertyPositive(System.String,System.Int32)">
             <summary>
             Throws an exception if an Int32 property value is not positive.
             </summary>
            
             <param name="sPropertyName">
             Name of the property.
             </param>
            
             <param name="iPropertyValue">
             Property value to check.
             </param>
        </member>
        <member name="M:Microsoft.Research.CommunityTechnologies.AppLib.ArgumentChecker.CheckPropertyNotNegative(System.String,System.Int32)">
             <summary>
             Throws an exception if an Int32 property value is negative.
             </summary>
            
             <param name="sPropertyName">
             Name of the property.
             </param>
            
             <param name="iPropertyValue">
             Property value to check.
             </param>
        </member>
        <member name="M:Microsoft.Research.CommunityTechnologies.AppLib.ArgumentChecker.CheckPropertyNotEqual(System.String,System.String,System.String)">
             <summary>
             Throws an exception if a string property is equal to a specified
             invalid value.
             </summary>
            
             <param name="sPropertyName">
             Name of the property.
             </param>
            
             <param name="sPropertyValue">
             Property value to check.
             </param>
            
             <param name="sInvalidValue">
             Invalid value for <paramref name="sPropertyValue" />.  Can't be null.
             </param>
        </member>
        <member name="M:Microsoft.Research.CommunityTechnologies.AppLib.ArgumentChecker.CheckPropertyNotEqual(System.String,System.Int32,System.Int32)">
             <summary>
             Throws an exception if an Int32 property is equal to a specified
             invalid value.
             </summary>
            
             <param name="sPropertyName">
             Name of the property.
             </param>
            
             <param name="iPropertyValue">
             Property value to check.
             </param>
            
             <param name="iInvalidValue">
             Invalid value for <paramref name="iPropertyValue" />.
             </param>
        </member>
        <member name="M:Microsoft.Research.CommunityTechnologies.AppLib.ArgumentChecker.CheckPropertyInRange(System.String,System.Int32,System.Int32,System.Int32)">
             <summary>
             Throws an exception if an Int32 property value is not within a
             specified range.
             </summary>
            
             <param name="sPropertyName">
             Name of the property.
             </param>
            
             <param name="iPropertyValue">
             Property value to check.
             </param>
            
             <param name="iMinimumValidValue">
             Minimum allowed value.
             </param>
            
             <param name="iMaximumValidValue">
             Maximum allowed value.
             </param>
        </member>
        <member name="M:Microsoft.Research.CommunityTechnologies.AppLib.ArgumentChecker.CheckPropertyInRange(System.String,System.Single,System.Single,System.Single)">
             <summary>
             Throws an exception if a Single property value is not within a
             specified range.
             </summary>
            
             <param name="sPropertyName">
             Name of the property.
             </param>
            
             <param name="fPropertyValue">
             Property value to check.
             </param>
            
             <param name="fMinimumValidValue">
             Minimum allowed value.
             </param>
            
             <param name="fMaximumValidValue">
             Maximum allowed value.
             </param>
        </member>
        <member name="M:Microsoft.Research.CommunityTechnologies.AppLib.ArgumentChecker.CheckPropertyIsDefined(System.String,System.Object,System.Type)">
             <summary>
             Throws an exception if a property value is not defined within a
             specified enumeration.
             </summary>
            
             <param name="sPropertyName">
             Name of the property.
             </param>
            
             <param name="oPropertyValue">
             Property value to check.
             </param>
            
             <param name="oEnumType">
             Type of the enumeration that <paramref name="oPropertyValue" /> is
             supposed to be defined within.
             </param>
        </member>
        <member name="M:Microsoft.Research.CommunityTechnologies.AppLib.ArgumentChecker.CheckArgumentNotNull(System.String,System.String,System.Object)">
             <summary>
             Throws an exception if a method argument is null.
             </summary>
            
             <param name="sMethodName">
             Name of the method calling this method.
             </param>
            
             <param name="sArgumentName">
             Name of the argument to check.
             </param>
            
             <param name="oArgumentValue">
             Argument to check.
             </param>
        </member>
        <member name="M:Microsoft.Research.CommunityTechnologies.AppLib.ArgumentChecker.CheckArgumentNotEmpty(System.String,System.String,System.String)">
             <summary>
             Throws an exception if a string method argument is null or has a length
             of zero.
             </summary>
            
             <param name="sMethodName">
             Name of the method calling this method.
             </param>
            
             <param name="sArgumentName">
             Name of the argument to check.
             </param>
            
             <param name="sArgumentValue">
             Argument value to check.
             </param>
        </member>
        <member name="M:Microsoft.Research.CommunityTechnologies.AppLib.ArgumentChecker.CheckArgumentPositive(System.String,System.String,System.Int32)">
             <summary>
             Throws an exception if an Int32 method argument is not positive.
             </summary>
            
             <param name="sMethodName">
             Name of the method calling this method.
             </param>
            
             <param name="sArgumentName">
             Name of the argument to check.
             </param>
            
             <param name="iArgumentValue">
             Argument to check.
             </param>
        </member>
        <member name="M:Microsoft.Research.CommunityTechnologies.AppLib.ArgumentChecker.CheckArgumentNotNegative(System.String,System.String,System.Int32)">
             <summary>
             Throws an exception if an Int32 method argument is negative.
             </summary>
            
             <param name="sMethodName">
             Name of the method calling this method.
             </param>
            
             <param name="sArgumentName">
             Name of the argument to check.
             </param>
            
             <param name="iArgumentValue">
             Argument to check.
             </param>
        </member>
        <member name="M:Microsoft.Research.CommunityTechnologies.AppLib.ArgumentChecker.CheckArgumentIsDefined(System.String,System.String,System.Object,System.Type)">
             <summary>
             Throws an exception if a method argument is not defined within a
             specified enumeration.
             </summary>
            
             <param name="sMethodName">
             Name of the method calling this method.
             </param>
            
             <param name="sArgumentName">
             Name of the argument to check.
             </param>
            
             <param name="oArgumentValue">
             Argument value to check.
             </param>
            
             <param name="oEnumType">
             Type of the enumeration that <paramref name="oArgumentValue" /> is
             supposed to be defined within.
             </param>
        </member>
        <member name="M:Microsoft.Research.CommunityTechnologies.AppLib.ArgumentChecker.ThrowPropertyException(System.String,System.String,System.Exception)">
             <overloads>
             Throws a new <see cref="T:System.ApplicationException"/> when the value passed
             to a property setter is invalid.
             </overloads>
            
             <summary>
             Throws a new <see cref="T:System.ApplicationException"/> when the value passed
             to a property setter is invalid and there is an inner exception.
             </summary>
            
             <param name="sPropertyName">
             Name of the property calling this method.
             </param>
            
             <param name="sMessageDetails">
             Exception message details.  Gets appended to the class and property
             names.  See the example below.
             </param>
            
             <param name="oInnerException">
             Inner exception, or null if there is none.
             </param>
            
             <remarks>
             Call this method when the value passed to a property setter is invalid.
             It throws an exception whose message automatically includes the class
             and property names.
             </remarks>
            
             <example>
             If the class name that was passed to the <see cref="T:Microsoft.Research.CommunityTechnologies.AppLib.ArgumentChecker"/>
             constructor is "MyClass", <paramref name="sPropertyName"/> is
             "MyProperty", and <paramref name="sMessageDetails"/> is "The value
             can't be null.", then the new exception's message is
             "MyClass.MyProperty: The value can't be null."
             </example>
        </member>
        <member name="M:Microsoft.Research.CommunityTechnologies.AppLib.ArgumentChecker.ThrowPropertyException(System.String,System.String)">
             <summary>
             Throws a new <see cref="T:System.ApplicationException"/> when the value passed
             to a property setter is invalid and there is no inner exception.
             </summary>
            
             <param name="sPropertyName">
             Name of the property calling this method.
             </param>
            
             <param name="sMessageDetails">
             Exception message details.  Gets appended to the class and property
             names.  See the example below.
             </param>
            
             <remarks>
             Call this method when the value passed to a property setter is invalid.
             It throws an exception whose message automatically includes the class
             and property names.
             </remarks>
            
             <example>
             If the class name that was passed to the <see cref="T:Microsoft.Research.CommunityTechnologies.AppLib.ArgumentChecker"/>
             constructor is "MyClass", <paramref name="sPropertyName"/> is
             "MyProperty", and <paramref name="sMessageDetails"/> is "The value
             can't be null.", then the new exception's message is
             "MyClass.MyProperty: The value can't be null."
             </example>
        </member>
        <member name="M:Microsoft.Research.CommunityTechnologies.AppLib.ArgumentChecker.ThrowArgumentException(System.String,System.String,System.String,System.Exception)">
             <overloads>
             Throws a new <see cref="T:System.ArgumentException"/> when a method argument is
             invalid.
             </overloads>
            
             <summary>
             Throws a new <see cref="T:System.ArgumentException"/> when a method argument is
             invalid and there is an inner exception.
             </summary>
            
             <param name="sMethodName">
             Name of the method calling this method.
             </param>
            
             <param name="sArgumentName">
             Name of the invalid argument.
             </param>
            
             <param name="sMessageDetails">
             Exception message details.  Gets appended to the class and method
             names.  See the example below.
             </param>
            
             <param name="oInnerException">
             Inner exception, or null if there is none.
             </param>
            
             <remarks>
             Call this method when a method argument is invalid.  It throws an
             exception whose message automatically includes the class and method
             names.
             </remarks>
            
             <example>
             If the class name that was passed to the <see cref="T:Microsoft.Research.CommunityTechnologies.AppLib.ArgumentChecker"/>
             constructor is "MyClass", <paramref name="sMethodName"/> is
             "MyMethod", <paramref name="sArgumentName"/> is "TheArgument", and
             <paramref name="sMessageDetails"/> is "TheArgument can't be empty.",
             then the new exception's message is "MyClass.MyMethod: TheArgument
             can't be empty."
             </example>
        </member>
        <member name="M:Microsoft.Research.CommunityTechnologies.AppLib.ArgumentChecker.ThrowArgumentException(System.String,System.String,System.String)">
             <summary>
             Throws a new <see cref="T:System.ArgumentException"/> when a method argument is
             invalid and there is no inner exception.
             </summary>
            
             <param name="sMethodName">
             Name of the method calling this method.
             </param>
            
             <param name="sArgumentName">
             Name of the invalid argument.
             </param>
            
             <param name="sMessageDetails">
             Exception message details.  Gets appended to the class and method
             names.  See the example below.
             </param>
            
             <remarks>
             Call this method when a method argument is invalid.  It throws an
             exception whose message automatically includes the class and method
             names.
             </remarks>
            
             <example>
             If the class name that was passed to the <see cref="T:Microsoft.Research.CommunityTechnologies.AppLib.ArgumentChecker"/>
             constructor is "MyClass", <paramref name="sMethodName"/> is
             "MyMethod", <paramref name="sArgumentName"/> is "TheArgument", and
             <paramref name="sMessageDetails"/> is "TheArgument can't be empty.",
             then the new exception's message is "MyClass.MyMethod: TheArgument
             can't be empty."
             </example>
        </member>
        <member name="M:Microsoft.Research.CommunityTechnologies.AppLib.ArgumentChecker.AssertValid">
            <summary>
            Asserts if the object is in an invalid state.  Debug-only.
            </summary>
        </member>
        <member name="F:Microsoft.Research.CommunityTechnologies.AppLib.ArgumentChecker.m_sOwnerClassName">
            Class name of the object that created this object.
        </member>
        <member name="T:Microsoft.Chung.Visualization.DraggedVertex">
            <summary>
            Represents a vertex that is being dragged with the mouse.
            </summary>
        </member>
        <member name="M:Microsoft.Chung.Visualization.DraggedVertex.#ctor(Microsoft.Chung.Core.IVertex,System.Drawing.Point)">
             <summary>
             Initializes a new instance of the <see cref="T:Microsoft.Chung.Visualization.DraggedVertex"/> class.
             </summary>
            
             <param name="vertex">
             The vertex being dragged.  Can't be null.
             </param>
            
             <param name="mouseDownLocation">
             Location where the vertex was clicked when the drag was started, in
             client coordinates.
             </param>
        </member>
        <member name="M:Microsoft.Chung.Visualization.DraggedVertex.AssertValid">
            <summary>
            Asserts if the object is in an invalid state.  Debug-only.
            </summary>
        </member>
        <member name="F:Microsoft.Chung.Visualization.DraggedVertex.m_oVertex">
            The vertex being dragged.  Can't be null.
        </member>
        <member name="F:Microsoft.Chung.Visualization.DraggedVertex.m_oMouseDownLocation">
            Location where the vertex was clicked when the drag was started, in
            client coordinates.
        </member>
        <member name="P:Microsoft.Chung.Visualization.DraggedVertex.Vertex">
             <summary>
             Gets the vertex being dragged.
             </summary>
            
             <value>
             The vertex being dragged, as an <see cref="T:Microsoft.Chung.Core.IVertex"/>.
             </value>
        </member>
        <member name="P:Microsoft.Chung.Visualization.DraggedVertex.MouseDownLocation">
             <summary>
             Gets the location where the vertex was clicked when the drag was
             started.
             </summary>
            
             <value>
             The location where the vertex was clicked when the drag was started, as
             a <see cref="T:System.Drawing.Point"/> in client coordinates.
             </value>
        </member>
        <member name="T:Microsoft.Research.CommunityTechnologies.GraphicsLib.GraphicsUtil">
             <summary>
            	Set of static methods that perform graphics operations not available
            	directly through GDI+.
             </summary>
            
             <remarks>
            	Do not try to instantiate an object of this type.  All methods are static.
            	</remarks>
        </member>
        <member name="M:Microsoft.Research.CommunityTechnologies.GraphicsLib.GraphicsUtil.#ctor">
             <summary>
             Do not use this contructor.
             </summary>
            
             <remarks>
             All methods on this class are static, so there is no need to create a
             GraphicsUtil object.
             </remarks>
        </member>
        <member name="M:Microsoft.Research.CommunityTechnologies.GraphicsLib.GraphicsUtil.PixelsToPoints(System.Drawing.Graphics,System.Single,System.Single,System.Single@,System.Single@)">
             <summary>
             Converts a height and width from pixels to points.
             </summary>
            
             <param name="oGraphics">
            	Object that will do the conversion.
             </param>
            
             <param name="fWidthPx">
            	Width in pixels.  Must be greater than or equal to zero.
             </param>
            
             <param name="fHeightPx">
            	Height in pixels.  Must be greater than or equal to zero.
             </param>
            
             <param name="fWidthPt">
            	Where the width in points gets stored.
             </param>
            
             <param name="fHeightPt">
            	Where the height in points gets stored.
             </param>
        </member>
        <member name="M:Microsoft.Research.CommunityTechnologies.GraphicsLib.GraphicsUtil.PointsToPixels(System.Drawing.Graphics,System.Single,System.Single,System.Single@,System.Single@)">
             <summary>
             Converts a height and width from points to pixels.
             </summary>
            
             <param name="oGraphics">
            	Object that will do the conversion.
             </param>
            
             <param name="fWidthPt">
            	Width in points.  Must be greater than or equal to zero.
             </param>
            
             <param name="fHeightPt">
            	Height in points.  Must be greater than or equal to zero.
             </param>
            
             <param name="fWidthPx">
            	Where the width in pixels gets stored.
             </param>
            
             <param name="fHeightPx">
            	Where the height in pixels gets stored.
             </param>
            
             <remarks>
             There are two versions of this method.  This version converts to
             floating-point pixels.  The other converts to integer pixels.
             </remarks>
        </member>
        <member name="M:Microsoft.Research.CommunityTechnologies.GraphicsLib.GraphicsUtil.PointsToPixels(System.Drawing.Graphics,System.Single,System.Single,System.Int32@,System.Int32@)">
             <summary>
             Converts a height and width from points to pixels.
             </summary>
            
             <param name="oGraphics">
            	Object that will do the conversion.
             </param>
            
             <param name="fWidthPt">
            	Width in points.  Must be greater than or equal to zero.
             </param>
            
             <param name="fHeightPt">
            	Height in points.  Must be greater than or equal to zero.
             </param>
            
             <param name="iWidthPx">
            	Where the width in pixels gets stored.
             </param>
            
             <param name="iHeightPx">
            	Where the height in pixels gets stored.
             </param>
            
             <remarks>
             There are two versions of this method.  This version converts to
             integer pixels.  The other converts to floating-point pixels.
             </remarks>
        </member>
        <member name="M:Microsoft.Research.CommunityTechnologies.GraphicsLib.GraphicsUtil.DrawCircle(System.Drawing.Graphics,System.Drawing.Pen,System.Single,System.Single,System.Single)">
             <summary>
             Draws a circle defined by a center point and radius.
             </summary>
            
             <param name="oGraphics">
            	Object to draw on.
             </param>
            
             <param name="oPen">
            	Pen to draw with.
             </param>
            
             <param name="fXCenter">
             x-coordinate of the circle's center.
             </param>
            
             <param name="fYCenter">
             y-coordinate of the circle's center.
             </param>
            
             <param name="fRadius">
             Radius of the circle.
             </param>
        </member>
        <member name="M:Microsoft.Research.CommunityTechnologies.GraphicsLib.GraphicsUtil.FillCircle(System.Drawing.Graphics,System.Drawing.Brush,System.Single,System.Single,System.Single)">
             <summary>
             Fills the interior of a circle defined by a center point and radius.
             </summary>
            
             <param name="oGraphics">
            	Object to draw on.
             </param>
            
             <param name="oBrush">
            	Brush to draw with.
             </param>
            
             <param name="fXCenter">
             x-coordinate of the circle's center.
             </param>
            
             <param name="fYCenter">
             y-coordinate of the circle's center.
             </param>
            
             <param name="fRadius">
             Radius of the circle.
             </param>
        </member>
        <member name="M:Microsoft.Research.CommunityTechnologies.GraphicsLib.GraphicsUtil.FillCircle3D(System.Drawing.Graphics,System.Drawing.Color,System.Single,System.Single,System.Single)">
             <summary>
             Fills the interior of a circle defined by a center point and radius
             using 3-D shading.
             </summary>
            
             <param name="oGraphics">
            	Object to draw on.
             </param>
            
             <param name="oColor">
            	Color to use.
             </param>
            
             <param name="fXCenter">
             x-coordinate of the circle's center.
             </param>
            
             <param name="fYCenter">
             y-coordinate of the circle's center.
             </param>
            
             <param name="fRadius">
             Radius of the circle.  Must be greater than zero.
             </param>
            
             <remarks>
            	The circle is shaded to make it look as if it's a 3-D sphere.
             </remarks>
        </member>
        <member name="M:Microsoft.Research.CommunityTechnologies.GraphicsLib.GraphicsUtil.FillSquare(System.Drawing.Graphics,System.Drawing.Brush,System.Single,System.Single,System.Single)">
             <summary>
             Fills the interior of a square defined by a center point and
             half-width.
             </summary>
            
             <param name="oGraphics">
            	Object to draw on.
             </param>
            
             <param name="oBrush">
            	Brush to draw with.
             </param>
            
             <param name="fXCenter">
             x-coordinate of the square's center.
             </param>
            
             <param name="fYCenter">
             y-coordinate of the square's center.
             </param>
            
             <param name="fHalfWidth">
             One half of the width of the square.
             </param>
            
             <remarks>
             The square is specified as a center point and half-width to make this
             method compatible with <see cref="M:Microsoft.Research.CommunityTechnologies.GraphicsLib.GraphicsUtil.FillCircle(System.Drawing.Graphics,System.Drawing.Brush,System.Single,System.Single,System.Single)"/>.
             </remarks>
        </member>
        <member name="M:Microsoft.Research.CommunityTechnologies.GraphicsLib.GraphicsUtil.FillSquare3D(System.Drawing.Graphics,System.Drawing.Color,System.Single,System.Single,System.Single)">
             <summary>
             Fills the interior of a square using 3-D shading.
             </summary>
            
             <param name="oGraphics">
            	Object to draw on.
             </param>
            
             <param name="oColor">
            	Color to use.
             </param>
            
             <param name="fXCenter">
             x-coordinate of the square's center.
             </param>
            
             <param name="fYCenter">
             y-coordinate of the square's center.
             </param>
            
             <param name="fHalfWidth">
             One half of the width of the square.
             </param>
            
             <remarks>
            	The square is shaded to make it look as if it's 3-D.
            
             <para>
             The square is specified as a center point and half-width to make this
             method compatible with <see cref="M:Microsoft.Research.CommunityTechnologies.GraphicsLib.GraphicsUtil.FillCircle(System.Drawing.Graphics,System.Drawing.Brush,System.Single,System.Single,System.Single)"/>.
             </para>
            
             </remarks>
        </member>
        <member name="M:Microsoft.Research.CommunityTechnologies.GraphicsLib.GraphicsUtil.Clear(System.Drawing.Graphics,System.Drawing.Color)">
             <summary>
             Clears the entire drawing surface and fills it with the specified
             background color.
             </summary>
            
             <param name="oGraphics">
            	Object to draw on.
             </param>
            
             <param name="oColor">
             <see cref="T:System.Drawing.Color"/> structure that represents the background color of
             the drawing surface. 
             </param>
            
             <remarks>
             This adds a GDI bug workaround to <see cref="M:System.Drawing.Graphics.Clear(System.Drawing.Color)"/>.
             </remarks>
        </member>
        <member name="M:Microsoft.Research.CommunityTechnologies.GraphicsLib.GraphicsUtil.CreateRoundedRectangleGraphicsPath(System.Drawing.Rectangle,System.Int32)">
             <summary>
             Creates a GraphicsPath that describes a rectangle with rounded corners.
             </summary>
            
             <param name="oRectangle">
            	Rectangle to add rounded corners to.
             </param>
            
             <param name="iCornerRadius">
             Radius of the rectangle's corners.
             </param>
            
             <returns>
             A new GraphicsPath.
             </returns>
        </member>
        <member name="M:Microsoft.Research.CommunityTechnologies.GraphicsLib.GraphicsUtil.FillTextRectangle(System.Drawing.Graphics,System.Drawing.Rectangle,System.Boolean)">
             <summary>
             Fills the interior of a rectangle that will contain text.
             </summary>
            
             <param name="oGraphics">
            	Object to draw on.
             </param>
            
             <param name="oRectangle">
             Rectangle to draw on.  If empty, this method does nothing.
             </param>
            
             <param name="bTextIsSelected">
            	true if the text is selected.
             </param>
            
             <remarks>
             This method fills the interior of a rectangle with either the system
             window or system highlight color, depending on whether the text is
             selected.  Call this method before you draw the text.  When you draw
             the text, use SystemBrushes.HighlightText or SystemBrushes.WindowText
             as the text color.
             </remarks>
        </member>
        <member name="M:Microsoft.Research.CommunityTechnologies.GraphicsLib.GraphicsUtil.RadiusToArea(System.Double)">
             <summary>
            	Returns the area of a circle given its radius.
             </summary>
            
             <param name="dRadius">
            	The circle's radius.
             </param>
            
             <returns>
            	The circle's area.
             </returns>
        </member>
        <member name="M:Microsoft.Research.CommunityTechnologies.GraphicsLib.GraphicsUtil.AreaToRadius(System.Double)">
             <summary>
            	Returns the radius of a circle given its area.
             </summary>
            
             <param name="dArea">
            	The circle's area.
             </param>
            
             <returns>
            	The circle's radius.
             </returns>
        </member>
        <member name="M:Microsoft.Research.CommunityTechnologies.GraphicsLib.GraphicsUtil.SquareFromCenterAndHalfWidth(System.Single,System.Single,System.Single)">
             <summary>
             Returns a square given a center point and half-width.
             </summary>
            
             <param name="fXCenter">
             x-coordinate of the square's center.
             </param>
            
             <param name="fYCenter">
             y-coordinate of the square's center.
             </param>
            
             <param name="fHalfWidth">
             One half of the width of the square.
             </param>
        </member>
        <member name="M:Microsoft.Research.CommunityTechnologies.GraphicsLib.GraphicsUtil.RectangleFToRectangle(System.Drawing.RectangleF,System.Int32)">
             <summary>
             Converts a RectangleF to a Rectangle.
             </summary>
            
             <param name="oRectangle">
             Rectangle to convert.
             </param>
             
             <param name="iPenWidthPx">
             Width of the pen that will be used to draw the rectangle.
             </param>
            
             <returns>
             Converted rectangle.
             </returns>
            
             <remarks>
            	This method converts a floating-point RectangleF to an integer
            	Rectangle, compensating for some GDI oddities in the process.
            
             <para>
            	If precise rectangle drawing is required, the caller should convert
            	all RectangleF objects to Rectangles using this method, then use the
            	Graphics.DrawRectangle(Pen, Rectangle) method to draw them.  The
            	floating-point version of Graphics.DrawRectangle() should not be used.
             </para>
            
             </remarks>
        </member>
        <member name="M:Microsoft.Research.CommunityTechnologies.GraphicsLib.GraphicsUtil.SaveHighQualityImage(System.Drawing.Image,System.String,System.Drawing.Imaging.ImageFormat)">
             <summary>
             Saves an Image object to a specified file in a specified format using
             high quality settings.
             </summary>
            
             <param name="oImage">
             Image to save.
             </param>
             
             <param name="sFileName">
             Full path of the file to save to.
             </param>
            
             <param name="eImageFormat">
             File format.
             </param>
            
             <remarks>
             Use this instead of Image.Save(filename, format) if you want a high-
             quality image.
             </remarks>
        </member>
        <member name="M:Microsoft.Research.CommunityTechnologies.GraphicsLib.GraphicsUtil.SaveJpegImage(System.Drawing.Image,System.String,System.Int32)">
             <summary>
             Saves an image to a JPEG file with a specified quality level.
             </summary>
            
             <param name="oImage">
             Image to save.
             </param>
             
             <param name="sFileName">
             Full path of the file to save to.
             </param>
            
             <param name="iQuality">
             Quality level to use.  I THINK this can be from 1 to 100; the
             documentation is not clear.
             </param>
            
             <remarks>
             Image.Save(..., ImageFormat.Jpeg) uses a low quality by default.  This
             method allows the quality to be specified.
             </remarks>
        </member>
        <member name="M:Microsoft.Research.CommunityTechnologies.GraphicsLib.GraphicsUtil.DrawErrorStringOnGraphics(System.Drawing.Graphics,System.Drawing.Rectangle,System.String)">
             <summary>
            	Draws an error string on a Graphics object.
             </summary>
            
             <param name="oGraphics">
             Object to draw on.
             </param>
            
             <param name="oRectangle">
             Rectangle to draw on.
             </param>
            
             <param name="sString">
             String to draw.
             </param>
            
             <remarks>
             This can be used to draw error strings on bitmaps in a uniform manner.
             </remarks>
        </member>
        <member name="M:Microsoft.Research.CommunityTechnologies.GraphicsLib.GraphicsUtil.GetImageCodecInfoForMimeType(System.String)">
             <summary>
             Gets the ImageCodecInfo object for a specified MIME type.
             </summary>
            
             <param name="sMimeType">
             MIME type.
             </param>
            
             <remarks>
             An exception is thrown if the requested object isn't found.
             </remarks>
        </member>
        <member name="M:Microsoft.Research.CommunityTechnologies.GraphicsLib.GraphicsUtil.ConvertPixelsAndPoints(System.Boolean,System.Drawing.Graphics,System.Single,System.Single,System.Single@,System.Single@)">
             <summary>
             Converts a height and width from pixels to points, or vice versa.
             </summary>
            
             <param name="bPixelsToPoints">
            	true to convert pixels to points, false to convert points to pixels.
             </param>
            
             <param name="oGraphics">
            	Object that will do the conversion.
             </param>
            
             <param name="fWidthIn">
             Input width.  Must be greater than or equal to zero.
             </param>
            
             <param name="fHeightIn">
             Input height.  Must be greater than or equal to zero.
             </param>
            
             <param name="fWidthOut">
            	Where the converted width gets stored.
             </param>
            
             <param name="fHeightOut">
            	Where the converted height gets stored.
             </param>
        </member>
        <member name="M:Microsoft.Research.CommunityTechnologies.GraphicsLib.GraphicsUtil.DisposePen(System.Drawing.Pen@)">
             <summary>
             Disposes of a pen.
             </summary>
            
             <param name="oPen">
            	Pen to dispose.  Can be null.  Gets set to null.
             </param>
            
             <remarks>
             If <paramref name="oPen" /> isn't null, this method calls the Dispose
             method on <paramref name="oPen" />, then sets it to null.
             </remarks>
        </member>
        <member name="M:Microsoft.Research.CommunityTechnologies.GraphicsLib.GraphicsUtil.DisposeBrush(System.Drawing.Brush@)">
             <summary>
             Disposes of a brush.
             </summary>
            
             <param name="oBrush">
            	Brush to dispose.  Can be null.  Gets set to null.
             </param>
            
             <remarks>
             If <paramref name="oBrush" /> isn't null, this method calls the Dispose
             method on <paramref name="oBrush" />, then sets it to null.
             </remarks>
        </member>
        <member name="M:Microsoft.Research.CommunityTechnologies.GraphicsLib.GraphicsUtil.DisposeGraphics(System.Drawing.Graphics@)">
             <summary>
             Disposes of a Graphics object.
             </summary>
            
             <param name="oGraphics">
            	Graphics object to dispose.  Can be null.  Gets set to null.
             </param>
            
             <remarks>
             If <paramref name="oGraphics" /> isn't null, this method calls the
             Dispose method on <paramref name="oGraphics" />, then sets it to null.
             </remarks>
        </member>
        <member name="M:Microsoft.Research.CommunityTechnologies.GraphicsLib.GraphicsUtil.DisposeGraphicsPath(System.Drawing.Drawing2D.GraphicsPath@)">
             <summary>
             Disposes of a GraphicsPath object.
             </summary>
            
             <param name="oGraphicsPath">
            	GraphicsPath object to dispose.  Can be null.  Gets set to null.
             </param>
            
             <remarks>
             If <paramref name="oGraphicsPath" /> isn't null, this method calls the
             Dispose method on <paramref name="oGraphicsPath" />, then sets it to
             null.
             </remarks>
        </member>
        <member name="M:Microsoft.Research.CommunityTechnologies.GraphicsLib.GraphicsUtil.DisposeBitmap(System.Drawing.Bitmap@)">
             <summary>
             Disposes of a Bitmap object.
             </summary>
            
             <param name="oBitmap">
            	Bitmap object to dispose.  Can be null.  Gets set to null.
             </param>
            
             <remarks>
             If <paramref name="oBitmap" /> isn't null, this method calls the
             Dispose method on <paramref name="oBitmap" />, then sets it to null.
             </remarks>
        </member>
        <member name="T:Microsoft.Chung.Visualization.GraphMouseEventArgs">
            <summary>
            Provides information for the <see cref="E:Microsoft.Chung.Visualization.ChungControl.GraphMouseDown"/> and
            <see cref="E:Microsoft.Chung.Visualization.ChungControl.GraphMouseUp"/> events fired by the <see cref="T:Microsoft.Chung.Visualization.ChungControl"/>.
            </summary>
        </member>
        <member name="M:Microsoft.Chung.Visualization.GraphMouseEventArgs.#ctor(System.Windows.Forms.MouseEventArgs,Microsoft.Chung.Core.IVertex)">
             <summary>
            	Initializes a new instance of the GraphMouseEventArgs class.
             </summary>
            
             <param name="oMouseEventArgs">
             Mouse event arguments.
             </param>
            
             <param name="vertex">
             Vertex under the mouse, or null if the user clicked on a part of the
            	graph not covered by a vertex.
             </param>
        </member>
        <member name="M:Microsoft.Chung.Visualization.GraphMouseEventArgs.AssertValid">
            <summary>
            Asserts if the object is in an invalid state.  Debug-only.
            </summary>
        </member>
        <member name="F:Microsoft.Chung.Visualization.GraphMouseEventArgs.m_oVertex">
            Vertex, or null.
        </member>
        <member name="P:Microsoft.Chung.Visualization.GraphMouseEventArgs.Vertex">
             <summary>
            	Gets the vertex under the mouse.
             </summary>
            
             <value>
            	The vertex under the mouse, as an <see cref="T:Microsoft.Chung.Core.IVertex"/>, or null if
            	the user clicked a point on the graph not covered by a vertex.
             </value>
        </member>
    </members>
</doc>
